   0  $accept : prog $end

   1  $$1 :

   2  prog : $$1 declList FUNC funcList

   3  declList : declList decl
   4           |

   5  funcList : funcList func
   6           |

   7  $$2 :

   8  decl : type $$2 TArray Lid ';'
   9       | declStruct

  10  declStruct : STRUCT IDENT '{' listaCampos '}' ';'

  11  listaCampos : listaCampos decl
  12              |

  13  func : typeRet IDENT '(' listaParam ')' declList '{' listacmd '}'
  14       | main

  15  typeRet : type
  16          | VOID

  17  listaParam : param ';' listaParam
  18             | param
  19             |

  20  param : type IDENT

  21  TArray : '[' NUM ']' TArray
  22         |

  23  Lid : Lid ',' id
  24      | id

  25  id : IDENT

  26  type : INT
  27       | DOUBLE
  28       | BOOL
  29       | IDENT

  30  main : VOID MAIN '(' ')' declList bloco

  31  bloco : '{' listacmd '}'

  32  listacmd : listacmd cmd
  33           |

  34  cmd : IDENT '=' exp ';'

  35  $$3 :

  36  cmd : IF '(' exp ')' $$3 cmd
  37      | IDENT '(' ')' ';'
  38      | IDENT '(' listaExp ')' ';'

  39  exp : exp '+' exp
  40      | exp '*' exp
  41      | exp '>' exp
  42      | exp AND exp
  43      | NUM
  44      | '(' exp ')'
  45      | IDENT
  46      | IDENT '(' ')'
  47      | IDENT '(' listaExp ')'
  48      | exp '.' exp
  49      | exp '[' exp ']'

  50  listaExp : listaExp ',' exp
  51           | exp

state 0
	$accept : . prog $end  (0)
	$$1 : .  (1)

	.  reduce 1

	prog  goto 1
	$$1  goto 2


state 1
	$accept : prog . $end  (0)

	$end  accept


state 2
	prog : $$1 . declList FUNC funcList  (2)
	declList : .  (4)

	.  reduce 4

	declList  goto 3


state 3
	prog : $$1 declList . FUNC funcList  (2)
	declList : declList . decl  (3)

	IDENT  shift 4
	INT  shift 5
	DOUBLE  shift 6
	BOOL  shift 7
	STRUCT  shift 8
	FUNC  shift 9
	.  error

	type  goto 10
	decl  goto 11
	declStruct  goto 12


state 4
	type : IDENT .  (29)

	.  reduce 29


state 5
	type : INT .  (26)

	.  reduce 26


state 6
	type : DOUBLE .  (27)

	.  reduce 27


state 7
	type : BOOL .  (28)

	.  reduce 28


state 8
	declStruct : STRUCT . IDENT '{' listaCampos '}' ';'  (10)

	IDENT  shift 13
	.  error


state 9
	prog : $$1 declList FUNC . funcList  (2)
	funcList : .  (6)

	.  reduce 6

	funcList  goto 14


state 10
	decl : type . $$2 TArray Lid ';'  (8)
	$$2 : .  (7)

	.  reduce 7

	$$2  goto 15


state 11
	declList : declList decl .  (3)

	.  reduce 3


state 12
	decl : declStruct .  (9)

	.  reduce 9


state 13
	declStruct : STRUCT IDENT . '{' listaCampos '}' ';'  (10)

	'{'  shift 16
	.  error


state 14
	prog : $$1 declList FUNC funcList .  (2)
	funcList : funcList . func  (5)

	IDENT  shift 4
	INT  shift 5
	DOUBLE  shift 6
	BOOL  shift 7
	VOID  shift 17
	$end  reduce 2

	type  goto 18
	func  goto 19
	typeRet  goto 20
	main  goto 21


state 15
	decl : type $$2 . TArray Lid ';'  (8)
	TArray : .  (22)

	'['  shift 22
	IDENT  reduce 22

	TArray  goto 23


state 16
	declStruct : STRUCT IDENT '{' . listaCampos '}' ';'  (10)
	listaCampos : .  (12)

	.  reduce 12

	listaCampos  goto 24


state 17
	typeRet : VOID .  (16)
	main : VOID . MAIN '(' ')' declList bloco  (30)

	MAIN  shift 25
	IDENT  reduce 16


state 18
	typeRet : type .  (15)

	.  reduce 15


state 19
	funcList : funcList func .  (5)

	.  reduce 5


state 20
	func : typeRet . IDENT '(' listaParam ')' declList '{' listacmd '}'  (13)

	IDENT  shift 26
	.  error


state 21
	func : main .  (14)

	.  reduce 14


state 22
	TArray : '[' . NUM ']' TArray  (21)

	NUM  shift 27
	.  error


state 23
	decl : type $$2 TArray . Lid ';'  (8)

	IDENT  shift 28
	.  error

	Lid  goto 29
	id  goto 30


state 24
	declStruct : STRUCT IDENT '{' listaCampos . '}' ';'  (10)
	listaCampos : listaCampos . decl  (11)

	IDENT  shift 4
	INT  shift 5
	DOUBLE  shift 6
	BOOL  shift 7
	STRUCT  shift 8
	'}'  shift 31
	.  error

	type  goto 10
	decl  goto 32
	declStruct  goto 12


state 25
	main : VOID MAIN . '(' ')' declList bloco  (30)

	'('  shift 33
	.  error


state 26
	func : typeRet IDENT . '(' listaParam ')' declList '{' listacmd '}'  (13)

	'('  shift 34
	.  error


state 27
	TArray : '[' NUM . ']' TArray  (21)

	']'  shift 35
	.  error


state 28
	id : IDENT .  (25)

	.  reduce 25


state 29
	decl : type $$2 TArray Lid . ';'  (8)
	Lid : Lid . ',' id  (23)

	';'  shift 36
	','  shift 37
	.  error


state 30
	Lid : id .  (24)

	.  reduce 24


state 31
	declStruct : STRUCT IDENT '{' listaCampos '}' . ';'  (10)

	';'  shift 38
	.  error


state 32
	listaCampos : listaCampos decl .  (11)

	.  reduce 11


state 33
	main : VOID MAIN '(' . ')' declList bloco  (30)

	')'  shift 39
	.  error


state 34
	func : typeRet IDENT '(' . listaParam ')' declList '{' listacmd '}'  (13)
	listaParam : .  (19)

	IDENT  shift 4
	INT  shift 5
	DOUBLE  shift 6
	BOOL  shift 7
	')'  reduce 19

	type  goto 40
	listaParam  goto 41
	param  goto 42


state 35
	TArray : '[' NUM ']' . TArray  (21)
	TArray : .  (22)

	'['  shift 22
	IDENT  reduce 22

	TArray  goto 43


state 36
	decl : type $$2 TArray Lid ';' .  (8)

	.  reduce 8


state 37
	Lid : Lid ',' . id  (23)

	IDENT  shift 28
	.  error

	id  goto 44


state 38
	declStruct : STRUCT IDENT '{' listaCampos '}' ';' .  (10)

	.  reduce 10


state 39
	main : VOID MAIN '(' ')' . declList bloco  (30)
	declList : .  (4)

	.  reduce 4

	declList  goto 45


state 40
	param : type . IDENT  (20)

	IDENT  shift 46
	.  error


state 41
	func : typeRet IDENT '(' listaParam . ')' declList '{' listacmd '}'  (13)

	')'  shift 47
	.  error


state 42
	listaParam : param . ';' listaParam  (17)
	listaParam : param .  (18)

	';'  shift 48
	')'  reduce 18


state 43
	TArray : '[' NUM ']' TArray .  (21)

	.  reduce 21


state 44
	Lid : Lid ',' id .  (23)

	.  reduce 23


state 45
	declList : declList . decl  (3)
	main : VOID MAIN '(' ')' declList . bloco  (30)

	IDENT  shift 4
	INT  shift 5
	DOUBLE  shift 6
	BOOL  shift 7
	STRUCT  shift 8
	'{'  shift 49
	.  error

	type  goto 10
	decl  goto 11
	declStruct  goto 12
	bloco  goto 50


state 46
	param : type IDENT .  (20)

	.  reduce 20


state 47
	func : typeRet IDENT '(' listaParam ')' . declList '{' listacmd '}'  (13)
	declList : .  (4)

	.  reduce 4

	declList  goto 51


state 48
	listaParam : param ';' . listaParam  (17)
	listaParam : .  (19)

	IDENT  shift 4
	INT  shift 5
	DOUBLE  shift 6
	BOOL  shift 7
	')'  reduce 19

	type  goto 40
	listaParam  goto 52
	param  goto 42


state 49
	bloco : '{' . listacmd '}'  (31)
	listacmd : .  (33)

	.  reduce 33

	listacmd  goto 53


state 50
	main : VOID MAIN '(' ')' declList bloco .  (30)

	.  reduce 30


state 51
	declList : declList . decl  (3)
	func : typeRet IDENT '(' listaParam ')' declList . '{' listacmd '}'  (13)

	IDENT  shift 4
	INT  shift 5
	DOUBLE  shift 6
	BOOL  shift 7
	STRUCT  shift 8
	'{'  shift 54
	.  error

	type  goto 10
	decl  goto 11
	declStruct  goto 12


state 52
	listaParam : param ';' listaParam .  (17)

	.  reduce 17


state 53
	bloco : '{' listacmd . '}'  (31)
	listacmd : listacmd . cmd  (32)

	IDENT  shift 55
	IF  shift 56
	'}'  shift 57
	.  error

	cmd  goto 58


state 54
	func : typeRet IDENT '(' listaParam ')' declList '{' . listacmd '}'  (13)
	listacmd : .  (33)

	.  reduce 33

	listacmd  goto 59


state 55
	cmd : IDENT . '=' exp ';'  (34)
	cmd : IDENT . '(' ')' ';'  (37)
	cmd : IDENT . '(' listaExp ')' ';'  (38)

	'('  shift 60
	'='  shift 61
	.  error


state 56
	cmd : IF . '(' exp ')' $$3 cmd  (36)

	'('  shift 62
	.  error


state 57
	bloco : '{' listacmd '}' .  (31)

	.  reduce 31


state 58
	listacmd : listacmd cmd .  (32)

	.  reduce 32


state 59
	func : typeRet IDENT '(' listaParam ')' declList '{' listacmd . '}'  (13)
	listacmd : listacmd . cmd  (32)

	IDENT  shift 55
	IF  shift 56
	'}'  shift 63
	.  error

	cmd  goto 58


state 60
	cmd : IDENT '(' . ')' ';'  (37)
	cmd : IDENT '(' . listaExp ')' ';'  (38)

	IDENT  shift 64
	NUM  shift 65
	'('  shift 66
	')'  shift 67
	.  error

	exp  goto 68
	listaExp  goto 69


state 61
	cmd : IDENT '=' . exp ';'  (34)

	IDENT  shift 64
	NUM  shift 65
	'('  shift 66
	.  error

	exp  goto 70


state 62
	cmd : IF '(' . exp ')' $$3 cmd  (36)

	IDENT  shift 64
	NUM  shift 65
	'('  shift 66
	.  error

	exp  goto 71


state 63
	func : typeRet IDENT '(' listaParam ')' declList '{' listacmd '}' .  (13)

	.  reduce 13


state 64
	exp : IDENT .  (45)
	exp : IDENT . '(' ')'  (46)
	exp : IDENT . '(' listaExp ')'  (47)

	'('  shift 72
	AND  reduce 45
	'>'  reduce 45
	'+'  reduce 45
	'*'  reduce 45
	'['  reduce 45
	'.'  reduce 45
	';'  reduce 45
	')'  reduce 45
	']'  reduce 45
	','  reduce 45


state 65
	exp : NUM .  (43)

	.  reduce 43


state 66
	exp : '(' . exp ')'  (44)

	IDENT  shift 64
	NUM  shift 65
	'('  shift 66
	.  error

	exp  goto 73


state 67
	cmd : IDENT '(' ')' . ';'  (37)

	';'  shift 74
	.  error


state 68
	exp : exp . '+' exp  (39)
	exp : exp . '*' exp  (40)
	exp : exp . '>' exp  (41)
	exp : exp . AND exp  (42)
	exp : exp . '.' exp  (48)
	exp : exp . '[' exp ']'  (49)
	listaExp : exp .  (51)

	AND  shift 75
	'>'  shift 76
	'+'  shift 77
	'*'  shift 78
	'['  shift 79
	'.'  shift 80
	')'  reduce 51
	','  reduce 51


state 69
	cmd : IDENT '(' listaExp . ')' ';'  (38)
	listaExp : listaExp . ',' exp  (50)

	')'  shift 81
	','  shift 82
	.  error


state 70
	cmd : IDENT '=' exp . ';'  (34)
	exp : exp . '+' exp  (39)
	exp : exp . '*' exp  (40)
	exp : exp . '>' exp  (41)
	exp : exp . AND exp  (42)
	exp : exp . '.' exp  (48)
	exp : exp . '[' exp ']'  (49)

	AND  shift 75
	'>'  shift 76
	'+'  shift 77
	'*'  shift 78
	'['  shift 79
	'.'  shift 80
	';'  shift 83
	.  error


state 71
	cmd : IF '(' exp . ')' $$3 cmd  (36)
	exp : exp . '+' exp  (39)
	exp : exp . '*' exp  (40)
	exp : exp . '>' exp  (41)
	exp : exp . AND exp  (42)
	exp : exp . '.' exp  (48)
	exp : exp . '[' exp ']'  (49)

	AND  shift 75
	'>'  shift 76
	'+'  shift 77
	'*'  shift 78
	'['  shift 79
	'.'  shift 80
	')'  shift 84
	.  error


state 72
	exp : IDENT '(' . ')'  (46)
	exp : IDENT '(' . listaExp ')'  (47)

	IDENT  shift 64
	NUM  shift 65
	'('  shift 66
	')'  shift 85
	.  error

	exp  goto 68
	listaExp  goto 86


state 73
	exp : exp . '+' exp  (39)
	exp : exp . '*' exp  (40)
	exp : exp . '>' exp  (41)
	exp : exp . AND exp  (42)
	exp : '(' exp . ')'  (44)
	exp : exp . '.' exp  (48)
	exp : exp . '[' exp ']'  (49)

	AND  shift 75
	'>'  shift 76
	'+'  shift 77
	'*'  shift 78
	'['  shift 79
	'.'  shift 80
	')'  shift 87
	.  error


state 74
	cmd : IDENT '(' ')' ';' .  (37)

	.  reduce 37


state 75
	exp : exp AND . exp  (42)

	IDENT  shift 64
	NUM  shift 65
	'('  shift 66
	.  error

	exp  goto 88


state 76
	exp : exp '>' . exp  (41)

	IDENT  shift 64
	NUM  shift 65
	'('  shift 66
	.  error

	exp  goto 89


state 77
	exp : exp '+' . exp  (39)

	IDENT  shift 64
	NUM  shift 65
	'('  shift 66
	.  error

	exp  goto 90


state 78
	exp : exp '*' . exp  (40)

	IDENT  shift 64
	NUM  shift 65
	'('  shift 66
	.  error

	exp  goto 91


state 79
	exp : exp '[' . exp ']'  (49)

	IDENT  shift 64
	NUM  shift 65
	'('  shift 66
	.  error

	exp  goto 92


state 80
	exp : exp '.' . exp  (48)

	IDENT  shift 64
	NUM  shift 65
	'('  shift 66
	.  error

	exp  goto 93


state 81
	cmd : IDENT '(' listaExp ')' . ';'  (38)

	';'  shift 94
	.  error


state 82
	listaExp : listaExp ',' . exp  (50)

	IDENT  shift 64
	NUM  shift 65
	'('  shift 66
	.  error

	exp  goto 95


state 83
	cmd : IDENT '=' exp ';' .  (34)

	.  reduce 34


state 84
	cmd : IF '(' exp ')' . $$3 cmd  (36)
	$$3 : .  (35)

	.  reduce 35

	$$3  goto 96


state 85
	exp : IDENT '(' ')' .  (46)

	.  reduce 46


state 86
	exp : IDENT '(' listaExp . ')'  (47)
	listaExp : listaExp . ',' exp  (50)

	')'  shift 97
	','  shift 82
	.  error


state 87
	exp : '(' exp ')' .  (44)

	.  reduce 44


state 88
	exp : exp . '+' exp  (39)
	exp : exp . '*' exp  (40)
	exp : exp . '>' exp  (41)
	exp : exp . AND exp  (42)
	exp : exp AND exp .  (42)
	exp : exp . '.' exp  (48)
	exp : exp . '[' exp ']'  (49)

	'+'  shift 77
	'*'  shift 78
	'['  shift 79
	'.'  shift 80
	AND  reduce 42
	'>'  reduce 42
	';'  reduce 42
	')'  reduce 42
	']'  reduce 42
	','  reduce 42


state 89
	exp : exp . '+' exp  (39)
	exp : exp . '*' exp  (40)
	exp : exp . '>' exp  (41)
	exp : exp '>' exp .  (41)
	exp : exp . AND exp  (42)
	exp : exp . '.' exp  (48)
	exp : exp . '[' exp ']'  (49)

	AND  shift 75
	'+'  shift 77
	'*'  shift 78
	'['  shift 79
	'.'  shift 80
	';'  reduce 41
	')'  reduce 41
	']'  reduce 41
	','  reduce 41


state 90
	exp : exp . '+' exp  (39)
	exp : exp '+' exp .  (39)
	exp : exp . '*' exp  (40)
	exp : exp . '>' exp  (41)
	exp : exp . AND exp  (42)
	exp : exp . '.' exp  (48)
	exp : exp . '[' exp ']'  (49)

	'*'  shift 78
	'['  shift 79
	'.'  shift 80
	AND  reduce 39
	'>'  reduce 39
	'+'  reduce 39
	';'  reduce 39
	')'  reduce 39
	']'  reduce 39
	','  reduce 39


state 91
	exp : exp . '+' exp  (39)
	exp : exp . '*' exp  (40)
	exp : exp '*' exp .  (40)
	exp : exp . '>' exp  (41)
	exp : exp . AND exp  (42)
	exp : exp . '.' exp  (48)
	exp : exp . '[' exp ']'  (49)

	'['  shift 79
	'.'  shift 80
	AND  reduce 40
	'>'  reduce 40
	'+'  reduce 40
	'*'  reduce 40
	';'  reduce 40
	')'  reduce 40
	']'  reduce 40
	','  reduce 40


state 92
	exp : exp . '+' exp  (39)
	exp : exp . '*' exp  (40)
	exp : exp . '>' exp  (41)
	exp : exp . AND exp  (42)
	exp : exp . '.' exp  (48)
	exp : exp . '[' exp ']'  (49)
	exp : exp '[' exp . ']'  (49)

	AND  shift 75
	'>'  shift 76
	'+'  shift 77
	'*'  shift 78
	'['  shift 79
	'.'  shift 80
	']'  shift 98
	.  error


state 93
	exp : exp . '+' exp  (39)
	exp : exp . '*' exp  (40)
	exp : exp . '>' exp  (41)
	exp : exp . AND exp  (42)
	exp : exp . '.' exp  (48)
	exp : exp '.' exp .  (48)
	exp : exp . '[' exp ']'  (49)

	.  reduce 48


state 94
	cmd : IDENT '(' listaExp ')' ';' .  (38)

	.  reduce 38


state 95
	exp : exp . '+' exp  (39)
	exp : exp . '*' exp  (40)
	exp : exp . '>' exp  (41)
	exp : exp . AND exp  (42)
	exp : exp . '.' exp  (48)
	exp : exp . '[' exp ']'  (49)
	listaExp : listaExp ',' exp .  (50)

	AND  shift 75
	'>'  shift 76
	'+'  shift 77
	'*'  shift 78
	'['  shift 79
	'.'  shift 80
	')'  reduce 50
	','  reduce 50


state 96
	cmd : IF '(' exp ')' $$3 . cmd  (36)

	IDENT  shift 55
	IF  shift 56
	.  error

	cmd  goto 99


state 97
	exp : IDENT '(' listaExp ')' .  (47)

	.  reduce 47


state 98
	exp : exp '[' exp ']' .  (49)

	.  reduce 49


state 99
	cmd : IF '(' exp ')' $$3 cmd .  (36)

	.  reduce 36


28 terminals, 24 nonterminals
52 grammar rules, 100 states
